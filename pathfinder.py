
"""

Pathfinder - A path planning algorithm review
by Tanuj Thakkar - 2020

"""

import matplotlib.pyplot as plt
from matplotlib.lines import Line2D
import math
import random
import time
from scipy.spatial import distance


# fig_manager = plt.get_current_fig_manager()
# fig_manager.full_screen_toggle()

sx = 5.0
sy = 5.0
gx = 81.0
gy = 13.0

# plt.plot(sx, sy, "og")
# plt.plot(gx, gy, "xb")
# plt.title('Test II - Start (5,5) > Goal (81,13)')
plt.axis("equal")

ox, oy = [], []
obstacles_x = [14, 39, 67, 15, 2, 62, 27, 12, 47, 3, 98, 32, 46, 16, 82, 2, 20, 65, 43, 55, 95, 34, 76, 31, 28, 96, 29, 77, 57, 57, 73, 88, 14, 44, 71, 87, 47, 59, 77, 75, 41, 10, 10, 57, 48, 22, 93, 9, 94, 54, 88, 21, 23, 40, 94, 16, 57, 16, 62, 4, 87, 5, 96, 19, 40, 22, 9, 15, 80, 65, 94, 76, 18, 47, 70, 27, 36, 87, 81, 37, 80, 99, 9, 44, 44, 74, 91, 14, 54, 72, 95, 41, 30, 76, 75, 62, 17, 19, 57, 9, 33, 37, 29, 37, 97, 49, 83, 34, 32, 53, 21, 32, 67, 83, 55, 20, 62, 78, 98, 47, 92, 95, 78, 30, 48, 87, 44, 52, 5, 87, 9, 90, 83, 92, 20, 9, 11, 17, 38, 17, 73, 87, 4, 92, 9, 88, 81, 11, 64, 14, 90, 14, 27, 52, 96, 5, 32, 37, 71, 38, 67, 39, 44, 80, 96, 37, 43, 63, 92, 44, 77, 33, 80, 42, 85, 19, 10, 88, 70, 88, 9, 60, 86, 23, 20, 46, 94, 44, 61, 46, 90, 4, 16, 15, 73, 35, 83, 4, 96, 68, 46, 84, 84, 45, 58, 47, 19, 98, 47, 40, 74, 87, 73, 55, 42, 19, 90, 76, 31, 16, 34, 86, 72, 80, 82, 39, 84, 61, 22, 24, 85, 99, 30, 21, 97, 94, 16, 61, 37, 9, 80, 59, 28, 72, 93, 79, 12, 75, 78, 12, 58, 77, 31, 75, 55, 17, 77, 5, 95, 89, 29, 47, 15, 9, 46, 27, 55, 2, 62, 30, 84, 85, 52, 69, 38, 79, 77, 76, 58, 73, 58, 90, 43, 9, 38, 98, 90, 2, 98, 23, 24, 79, 26, 59, 91, 4, 76, 32, 75, 95, 22, 22, 19, 47, 61, 78, 17, 42, 37, 69, 94, 24, 86, 51, 4, 13, 96, 79, 63, 25, 72, 17, 32, 38, 36, 38, 52, 51, 58, 99, 2, 38, 84, 36, 10, 16, 32, 59, 44, 68, 98, 22, 49, 78, 89, 46, 80, 56, 74, 79, 72, 99, 62, 55, 46, 90, 73, 22, 39, 53, 72, 22, 79, 25, 11, 44, 97, 46, 14, 95, 28, 85, 13, 3, 30, 17, 51, 16, 12, 17, 7, 63, 35, 45, 89, 77, 92, 76, 56, 46, 4, 20, 73, 37, 34, 54, 56, 93, 45, 19, 83, 26, 61, 25, 79, 61, 10, 20, 52, 47, 65, 55, 40, 69, 31, 15, 48, 43, 43, 32, 27, 71, 88, 73, 37, 31, 75, 65, 24, 59, 82, 91, 46, 17, 43, 86, 54, 83, 40, 76, 2, 78, 65, 37, 75, 30, 64, 89, 77, 83, 47, 76, 42, 94, 72, 35, 31, 3, 89, 35, 98, 15, 74, 12, 99, 17, 68, 74, 79, 11, 80, 16, 75, 71, 11, 5, 85, 51, 35, 26, 38, 55, 64, 80, 81, 25, 37, 76, 64, 69, 21, 33, 4, 34, 96, 53, 18, 79, 2, 33, 68, 33, 71, 81, 76, 48, 26, 32, 55, 92, 51, 37, 11, 31, 28, 84, 13, 2, 61, 56, 86, 88, 67, 90, 88, 12, 28, 55, 56, 11, 61, 63, 28, 19, 76, 37, 3, 49, 96, 19, 45, 9, 89, 19, 75, 33, 24, 31, 88, 65, 29, 39, 53, 30, 98, 3, 62, 75, 17, 74, 80, 3, 67, 62, 24, 43, 78, 22, 3, 44, 88, 64, 27, 85, 9, 94, 65, 45, 84, 21, 41, 20, 75, 9, 11, 20, 4, 59, 31, 68, 99, 11, 51, 96, 56, 59, 94, 91, 97, 73, 43, 4, 17, 37, 92, 65, 77, 41, 14, 16, 14, 72, 97, 96, 67, 89, 69, 37, 81, 33, 18, 33, 53, 24, 12, 34, 67, 95, 77, 2, 4, 41, 51, 7, 14, 60, 15, 41, 53, 38, 24, 88, 59, 71, 99, 78, 59, 62, 25, 40, 42, 32, 47, 28, 41, 78, 29, 88, 78, 26, 77, 87, 64, 97, 20, 57, 33, 32, 46, 61, 3, 97, 64, 40, 7, 86, 75, 9, 80, 9, 4, 46, 34, 76, 43, 3, 65, 72, 23, 30, 71, 44, 81, 29, 88, 54, 4, 49, 88, 35, 94, 59, 30, 29, 27, 56, 14, 95, 42, 99, 3, 70, 68, 32, 56, 27, 15, 21, 39, 58, 37, 21, 91, 23, 57, 49, 46, 72, 90, 65, 16, 27, 81, 46, 95, 32, 77, 39, 72, 11, 10, 60, 67, 12, 69, 71, 68, 2, 23, 80, 11, 34, 5, 5, 77, 81, 90, 70, 38, 86, 54, 74, 81, 60, 74, 43, 90, 4, 16, 53, 49, 61, 9, 69, 80, 71, 10, 3, 46, 27, 84, 83, 3, 58, 46, 76, 49, 5, 17, 16, 25, 77, 34, 7, 81, 38, 22, 36, 29, 71, 78, 18, 61, 3, 3, 18, 21, 96, 45, 51, 31, 33, 70, 92, 39, 60, 60, 97, 79, 72, 30, 15, 30, 34, 70, 52, 46, 47, 48, 67, 21, 44, 51, 95, 63, 11, 19, 25, 49, 42, 25, 83, 94, 30, 9, 7, 31, 89, 11, 22, 83, 46, 34, 84, 49, 22, 21, 19, 49, 16, 9, 53, 67, 94, 72, 61, 25, 70, 52, 80, 16, 76, 76, 85, 95, 57, 42, 7, 77, 80, 73, 5, 24, 80, 41, 76, 87, 23, 34, 70, 28, 94, 83, 99, 59, 40, 88, 42, 74, 5, 48, 15, 25, 81, 91, 40, 27, 33, 96, 84, 16, 86, 33, 49, 99, 10, 29, 3, 65, 40, 87, 75, 65, 83, 93, 19, 10, 85, 26, 30, 89, 94, 68, 62, 98, 86, 19, 96, 84, 92, 44, 24, 68, 69, 44, 44, 97, 93]
obstacles_y = [69, 81, 65, 40, 47, 78, 45, 66, 92, 27, 46, 66, 35, 10, 78, 84, 63, 30, 67, 17, 95, 66, 36, 35, 75, 2, 99, 40, 17, 63, 85, 99, 2, 76, 50, 28, 27, 47, 29, 3, 39, 11, 68, 30, 65, 35, 36, 74, 40, 62, 62, 47, 54, 55, 56, 93, 55, 9, 34, 21, 83, 35, 6, 44, 79, 29, 47, 16, 4, 40, 19, 35, 52, 74, 10, 71, 34, 7, 34, 62, 8, 26, 7, 67, 70, 13, 90, 49, 51, 96, 27, 39, 79, 44, 55, 41, 89, 96, 35, 81, 17, 22, 50, 16, 33, 86, 79, 21, 45, 2, 50, 47, 52, 70, 76, 9, 69, 60, 12, 14, 22, 3, 95, 55, 82, 71, 98, 51, 75, 24, 14, 39, 3, 15, 84, 3, 84, 58, 56, 39, 66, 56, 25, 95, 41, 52, 56, 8, 98, 17, 40, 35, 58, 98, 22, 65, 73, 95, 51, 10, 51, 70, 69, 8, 45, 98, 22, 16, 33, 60, 46, 34, 9, 70, 57, 57, 72, 27, 80, 77, 3, 10, 33, 27, 59, 66, 77, 48, 90, 66, 38, 37, 8, 79, 56, 53, 47, 93, 16, 65, 78, 99, 79, 97, 51, 8, 58, 84, 11, 45, 81, 52, 26, 85, 51, 54, 75, 40, 34, 93, 2, 66, 97, 82, 46, 14, 13, 89, 71, 76, 17, 31, 53, 30, 21, 24, 31, 45, 96, 43, 98, 82, 87, 97, 99, 38, 84, 24, 85, 44, 4, 27, 76, 31, 98, 61, 50, 97, 86, 66, 27, 34, 39, 42, 73, 70, 71, 37, 28, 59, 42, 62, 93, 64, 95, 47, 40, 81, 54, 77, 17, 45, 78, 22, 21, 40, 68, 55, 53, 89, 95, 20, 52, 17, 76, 26, 2, 62, 75, 74, 75, 31, 32, 93, 37, 12, 98, 87, 99, 79, 46, 18, 87, 91, 32, 99, 69, 77, 45, 41, 62, 26, 57, 52, 59, 53, 42, 87, 5, 61, 92, 28, 61, 91, 3, 61, 5, 6, 9, 56, 82, 3, 90, 13, 82, 95, 48, 99, 25, 77, 41, 27, 62, 17, 21, 23, 42, 23, 37, 66, 34, 47, 80, 44, 63, 95, 12, 87, 8, 98, 37, 91, 62, 16, 84, 24, 42, 2, 96, 36, 86, 85, 27, 92, 18, 65, 21, 6, 45, 36, 12, 45, 95, 11, 86, 40, 38, 4, 90, 9, 14, 67, 31, 50, 4, 41, 52, 71, 70, 62, 26, 30, 2, 66, 25, 45, 15, 43, 67, 92, 38, 56, 59, 79, 96, 90, 29, 47, 45, 25, 62, 67, 75, 81, 8, 47, 12, 9, 15, 23, 90, 59, 97, 79, 38, 28, 99, 67, 22, 12, 46, 29, 51, 65, 59, 13, 67, 87, 57, 17, 93, 38, 35, 62, 48, 17, 90, 30, 50, 13, 41, 63, 37, 22, 53, 28, 65, 66, 59, 86, 13, 59, 14, 95, 42, 95, 82, 41, 56, 12, 6, 9, 32, 68, 26, 7, 86, 76, 34, 18, 54, 32, 50, 25, 75, 89, 52, 47, 42, 95, 21, 79, 81, 18, 44, 80, 3, 70, 54, 60, 60, 3, 89, 92, 20, 66, 72, 40, 8, 77, 49, 61, 70, 23, 29, 2, 34, 32, 19, 92, 7, 15, 34, 97, 32, 74, 63, 94, 59, 24, 69, 85, 55, 71, 36, 54, 10, 79, 56, 43, 5, 25, 31, 15, 11, 15, 73, 18, 3, 83, 36, 75, 24, 11, 63, 27, 76, 31, 13, 58, 2, 40, 66, 16, 9, 58, 81, 4, 78, 79, 21, 58, 71, 95, 90, 39, 87, 8, 65, 64, 84, 48, 68, 77, 32, 17, 69, 43, 7, 93, 17, 20, 33, 49, 77, 26, 81, 7, 55, 2, 85, 32, 99, 26, 35, 57, 96, 76, 96, 64, 30, 19, 88, 82, 8, 29, 9, 16, 95, 67, 84, 62, 36, 31, 33, 40, 18, 25, 41, 78, 66, 20, 9, 86, 51, 36, 49, 2, 73, 78, 11, 26, 28, 66, 6, 34, 67, 65, 99, 88, 51, 64, 94, 87, 13, 40, 33, 44, 99, 55, 75, 79, 98, 58, 55, 20, 60, 44, 9, 53, 73, 33, 71, 94, 43, 36, 8, 14, 64, 90, 15, 85, 47, 93, 86, 80, 57, 71, 37, 48, 63, 68, 67, 35, 37, 18, 72, 14, 63, 65, 26, 9, 65, 43, 87, 87, 79, 35, 23, 82, 25, 80, 45, 9, 89, 28, 90, 50, 92, 21, 38, 45, 95, 42, 32, 93, 26, 51, 48, 72, 6, 99, 7, 82, 42, 58, 89, 3, 34, 54, 68, 13, 99, 81, 58, 84, 25, 85, 30, 93, 85, 6, 11, 61, 92, 32, 24, 86, 9, 17, 6, 12, 76, 57, 53, 61, 45, 26, 23, 46, 75, 26, 81, 67, 67, 68, 63, 99, 83, 15, 68, 45, 2, 4, 13, 63, 59, 80, 25, 7, 82, 78, 46, 85, 24, 60, 89, 64, 73, 88, 69, 97, 32, 92, 16, 67, 31, 21, 71, 41, 28, 98, 89, 68, 10, 81, 72, 13, 26, 94, 11, 65, 54, 5, 58, 84, 65, 44, 4, 10, 62, 69, 74, 15, 90, 86, 58, 82, 80, 87, 62, 34, 7, 66, 13, 42, 65, 83, 24, 63, 52, 90, 82, 48, 30, 22, 57, 49, 42, 44, 99, 95, 50, 61, 4, 51, 8, 42, 23, 44, 92, 62, 73, 57, 71, 59, 38, 61, 58, 43, 62, 79, 65, 62, 41, 57, 15, 26, 54, 3, 59, 27, 43, 48, 82, 41, 37, 46, 46, 95, 41, 64, 46, 29, 98, 20, 51, 36, 56, 9, 12, 2, 98, 4, 3, 61, 17, 94, 9, 98, 42, 98, 42, 43, 98, 79, 28, 90]
for i in range(1, 100):
    ox.append(i)
    oy.append(1.0)
for i in range(1, 100):
    ox.append(100.0)
    oy.append(i)
for i in range(1, 101):
    ox.append(i)
    oy.append(100.0)
for i in range(1, 101):
    ox.append(1.0)
    oy.append(i)
plt.plot(ox, oy, "ks")
for i in range(len(obstacles_x)):
    ox.append(obstacles_x[i])
    oy.append(obstacles_y[i])
    plt.plot(obstacles_x[i], obstacles_y[i], ".k")

def path(x, y):
	path = []
	for i in range(len(x)):
		path.append((x[i], y[i]))
	return path

def results(paths):
	
	for path in paths:
		dist = 0
		for i in range(len(path)-1):
			dist = dist + distance.euclidean(path[i], path[i+1])
		print(dist)

# Dijkstra
# 11, 15
dijkstra_x_1 = [11.0, 11.0, 9.0, 7.0, 7.0, 5.0, 5.0, 7.0, 7.0, 5.0]
dijkstra_y_1 = [15.0, 17.0, 19.0, 17.0, 15.0, 13.0, 11.0, 9.0, 7.0, 5.0]

# 87, 89

# 35, 71
dijkstra_x_2 = [35.0, 35.0, 35.0, 35.0, 33.0, 31.0, 29.0, 27.0, 25.0, 23.0, 21.0, 21.0, 19.0, 17.0, 15.0, 13.0, 13.0, 13.0, 13.0, 11.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 7.0, 7.0, 7.0, 7.0, 7.0, 5.0, 5.0, 7.0, 7.0, 5.0]
dijkstra_y_2 = [71.0, 69.0, 67.0, 65.0, 63.0, 63.0, 63.0, 61.0, 59.0, 57.0, 55.0, 53.0, 51.0, 49.0, 47.0, 45.0, 43.0, 41.0, 39.0, 37.0, 35.0, 33.0, 31.0, 29.0, 27.0, 25.0, 23.0, 21.0, 19.0, 17.0, 15.0, 13.0, 11.0, 9.0, 7.0, 5.0]

# 81, 13

# A*
# 11, 15
a_star_x_1 = [11.0, 11.0, 9.0, 7.0, 7.0, 5.0, 7.0, 7.0, 7.0, 5.0]
a_star_y_1 = [15.0, 17.0, 19.0, 17.0, 15.0, 13.0, 11.0, 9.0, 7.0, 5.0]

# 35, 71
a_star_x_2 = [35.0, 35.0, 35.0, 35.0, 33.0, 31.0, 29.0, 27.0, 25.0, 23.0, 21.0, 21.0, 19.0, 17.0, 15.0, 13.0, 13.0, 13.0, 13.0, 11.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 7.0, 7.0, 7.0, 7.0, 7.0, 5.0, 7.0, 7.0, 7.0, 5.0]
a_star_y_2 = [71.0, 69.0, 67.0, 65.0, 63.0, 63.0, 63.0, 61.0, 59.0, 57.0, 55.0, 53.0, 51.0, 49.0, 47.0, 45.0, 43.0, 41.0, 39.0, 37.0, 35.0, 33.0, 31.0, 29.0, 27.0, 25.0, 23.0, 21.0, 19.0, 17.0, 15.0, 13.0, 11.0, 9.0, 7.0, 5.0]

# PRM
# 11, 15
prm_x_1 = [11.0, 11.259339023750266, 6.1116777862127964, 5.858304126877272, 5.0]
prm_y_1 = [15.0, 18.538495779460366, 15.877056304476497, 4.494176791602564, 5.0]

# 35, 71
prm_x_2 = [35.0, 38.72622740314899, 33.38265328969491, 36.167524338754646, 33.381772758043084, 24.678853827614724, 20.433665170695836, 14.325992193192256, 5.157619171401178, 6.3460115673427016, 6.971343752619851, 5.0]
prm_y_2 = [71.0, 60.7210787718058, 53.423478263959765, 46.61477473624689, 41.504052597556694, 39.59928889452413, 35.65074862653164, 32.00956285610181, 20.040773193274685, 7.916887729721659, 7.672193532922811, 5.0]

# RRT
# 11, 15
rrt_path_1 = [[11, 15], [12.280880432762986, 16.56366525981492], [12.281495260529272, 18.56366516531162], [10.293908215639297, 18.34118429200891], [8.557059199308892, 17.349541465951006], [6.772305933861904, 16.44695862682968], [6.13033185770362, 14.552791452174624], [5.639282213138138, 12.61401084401595], [6.5325431676190835, 10.82457381880389], [7.3406876878720935, 8.995119683170795], [6.781371988550127, 7.074920227777691], [6.99811990109224, 5.086699831944111], [5, 5]]

# 35, 71
rrt_path_2 = [[35, 71], [35.23666783573129, 69.8430488394117], [35.63749076304714, 67.88362520452873], [35.58926083863807, 65.88420682050014], [35.81811696320741, 63.897343746645504], [34.09150289465491, 62.887985604915535], [32.208776875461986, 63.56277648856317], [30.213138000891934, 63.43077087389172], [28.21712542719507, 63.30454169484019], [26.691618013170718, 64.59791987996499], [28.01220726233585, 66.09993320713272], [27.887086083132267, 68.09601554273782], [26.04391392509566, 68.87236365785027], [25.190617018649288, 70.68119874968397], [24.307755141100046, 72.47578920579652], [22.326537891674942, 72.74924525451445], [20.806497082063597, 74.0490436762384], [18.851106422017033, 74.46910006126625], [17.18026807788495, 73.36987341139918], [15.197723614468716, 73.63353503275815], [13.362397434203551, 72.83881633281881], [12.596830559917198, 70.9911401271498], [10.704257296124302, 70.34448222595606], [8.78752328104301, 69.77340367143807], [8.5976447164823, 67.78243754145987], [8.756163853817569, 65.78872951792722], [7.408409726487887, 64.31104253745205], [7.325778891494609, 62.31275023022862], [7.579117808399036, 60.328860265240216], [7.258918201384004, 58.35465860085346], [7.201612443656028, 56.355479756894965], [7.706255365962205, 54.42019282184727], [8.175952335456893, 52.47612884222944], [7.5045476722248585, 50.59219259644237], [8.65755365680466, 48.95800252196415], [7.532393602368616, 47.30451685468382], [7.850817310168399, 45.330027973400604], [6.918104653815589, 43.560834060716275], [7.042796623985728, 41.56472486716621], [7.2727416776072795, 39.577987523601394], [8.1266371803609, 37.769434933717115], [8.410894013147301, 35.78973847895082], [8.984044279212975, 33.873622936372854], [10.052846859615013, 32.183161152088466], [11.665234082717058, 30.99985753814263], [13.446501117290499, 30.090413888683283], [13.696541091167852, 28.10610544202903], [13.980015896730833, 26.1262968566827], [13.246022741812213, 24.265852273113328], [13.22235217048051, 22.265992352005643], [12.553616335337853, 20.381107108072726], [11.379737105125615, 18.7618456860422], [9.388280802349849, 18.946512396996486], [7.663234279212652, 17.934477569032413], [6.185732471183309, 16.586520445355987], [6.22133304933117, 14.586837320749606], [5.322884465060632, 12.79999929187786], [6.855474688172425, 11.51502177922554], [6.827254222440769, 9.515220887808125], [7.609532138007663, 7.674557620717614], [6.815551280455271, 5.838912121760812], [5, 5]]

plt.plot(dijkstra_x_1, dijkstra_y_1, "-r")
plt.plot(a_star_x_1, a_star_y_1, "-b")
plt.plot(prm_x_1, prm_y_1, "-y")
plt.plot([x for (x, y) in rrt_path_1], [y for (x, y) in rrt_path_1], '-c')
legend_elements = [Line2D([0], [0], color='r', label='Dijkstra'),
					Line2D([0], [0], color='b', label='A-Star'),
					Line2D([0], [0], color='y', label='PRM'),
					Line2D([0], [0], color='c', label='RRT')]
# plt.legend(handles=legend_elements)
plt.show()

# plt.plot(dijkstra_x_2, dijkstra_y_2, "-r")
# plt.plot(a_star_x_2, a_star_y_2, "-b")
# plt.plot(prm_x_2, prm_y_2, "-y")
# plt.plot([x for (x, y) in rrt_path_2], [y for (x, y) in rrt_path_2], '-c')
# legend_elements = [Line2D([0], [0], color='r', label='Dijkstra'),
# 					Line2D([0], [0], color='b', label='A-Star'),
# 					Line2D([0], [0], color='y', label='PRM'),
# 					Line2D([0], [0], color='c', label='RRT')]
# # plt.legend(handles=legend_elements)
# plt.show()